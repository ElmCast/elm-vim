*elm-vim.txt* Elm development plugin
*elm-vim*

===============================================================================
             oooo                                     o8o
             `888                                     `"'
    .ooooo.   888  ooo. .oo.  .oo.       oooo    ooo oooo  ooo. .oo.  .oo.
   d88' `88b  888  `888P"Y88bP"Y88b       `88.  .8'  `888  `888P"Y88bP"Y88b
   888ooo888  888   888   888   888        `88..8'    888   888   888   888
   888    .o  888   888   888   888  .o.    `888'     888   888   888   888
   `Y8bod8P' o888o o888o o888o o888o Y8P     `8'     o888o o888o o888o o888o
===============================================================================
CONTENTS                                                         *elm-contents*

  1. Intro............................................|elm-intro|
  2. Install..........................................|elm-install|
  3. Commands.........................................|elm-commands|
  4. Mappings.........................................|elm-mappings|
  5. Settings.........................................|elm-settings|
  6. Troubleshooting..................................|elm-troubleshooting|
  7. Credits..........................................|elm-credits|

===============================================================================
INTRO                                                               *elm-intro*

Homepage: https://github.com/elmcast/elm-vim

Elm (http://elm-lang.org) support for Vim.

  * Improved Syntax highlighting, including backtick operators, booleans,
    chars, triple quotes, string escapes, and tuple functions
  * Improved Indentation
  * Commands and mappings for interfacing with the elm platform
  * Auto-complete

===============================================================================
INSTALL                                                           *elm-install*

Elm-vim follows the standard runtime path structure, so you should use a common
and well known plugin manager to install it. Do not use elm-vim with other Elm
plugins.


*  https://github.com/tpope/vim-pathogen >

    git clone https://github.com/elmcast/elm-vim.git ~/.vim/bundle/elm-vim
<

*  https://github.com/junegunn/vim-plug >

    Plug 'elmcast/elm-vim'

<
*  https://github.com/Shougo/neobundle.vim >

    NeoBundle 'elmcast/elm-vim'
<

*  https://github.com/gmarik/vundle >

    Plugin 'elmcast/elm-vim'

<
*  Manually >

    Copy all of the files into your `~/.vim` directory
<

Please be sure all necessary binaries are installed (such as `elm`,
`elm-doc`, `elm-reactor`, etc..) from http://elm-lang.org/. You may also want
to install `elm-test` with 'npm install -g elm-test' if you want to run unit
tests from within vim.


===============================================================================
COMMANDS                                                         *elm-commands*

:ElmMake [file]

    ElmMake calls `elm make` with the given {file}. If no {file} is given
    it uses the current file being edited.

:ElmMakeMain

    ElmMakeMain attempts to call `elm make` with "Main.elm".

:ElmTest [file]

    ElmTest calls `elm-test` with the given {file}. If no {file} is given
    it runs it in the root of your project.

:ElmRepl

    ElmRepl opens an elm repl in a subprocess.

:ElmErrorDetail

    ElmErrorDetail shows the detail of the current error in the quickfix
    window.

:ElmShowDocs

    ElmShowDocs queries elm-oracle, then echos the type and docs for the
    word under the cursor.

:ElmBrowseDocs

    ElmBrowseDocs queries elm-oracle, then opens docs web page for the
    word under the cursor.

:ElmFormat

    ElmFormat formats the current buffer with elm-format.

===============================================================================
MAPPINGS                                                         *elm-mappings*

elm-vim has several <Plug> keys which can be used to create custom mappings
For example, to create a mapping that `elm make` the current file, create a
mapping for the `(elm make)` plug: >

  au FileType elm nmap <leader>m <Plug>(elm make)

As always, you can create more advanced mappings with |elm-commands|.
Available <Plug> keys are:

                                                                   *(elm make)*

Calls `elm make` for the current file

                                                              *(elm make-main)*

Calls `elm make` with "Main.elm"

                                                                   *(elm-test)*

Calls `elm test` with "Test[filename].elm"

                                                                   *(elm-repl)*

Calls `elm repl` in a subprocess

                                                           *(elm-error-detail)*

Shows the detail of the current error.

                                                              *(elm-show-docs)*

Queries `elm oracle` and shows the docs for the word under the cursor.

                                                            *(elm-browse-docs)*

Queries `elm oracle` and browses the docs for the word under the cursor.

===============================================================================
SETTINGS                                                         *elm-settings*

                                                         *'g:elm_jump_to_error'*

This setting configures whether to have vim jump the cursor to the first error
found when running commands. By default it's enabled.
>
  let g:elm_jump_to_error = 0
<
                                                     *'g:elm_make_output_file'*

This setting configures which file elm make will compile to.
>
  let g:elm_make_output_file = "elm.js"
<
                                                   *'g:elm_make_show_warnings'*

This setting configures if warnings should be shown in the quickfix window.
>
  let g:elm_make_show_warnings = 0
<

                                              *'g:elm_syntastic_show_warnings'*

This setting configures if warnings should be sent to syntastic.
>
  let g:elm_syntastic_show_warnings = 0
<

                                                      *'g:elm_browser_command'*

This setting configures the browser command used to browse docs.
>
  let g:elm_browser_command = ''
<
                                                    *'g:elm_setup_keybindings'*

This setting toggles adding some default command keybindings.
>
  let g:elm_setup_keybindings = 1
<

                                                    *'g:elm_detailed_complete'*

This setting toggles showing type signatures in the complete menu.
>
  let g:elm_detailed_complete = 0
<

                                                      *'g:elm_format_autosave'*

This setting toggles whether the current buffer should be formatted on save.
>
  let g:elm_format_autosave = 0
<

                                                 *'g:elm_format_fail_silently'*

This setting toggles whether format errors show be display.
>
  let g:elm_format_fail_silently = 0
<


===============================================================================
TROUBLESHOOTING                                           *elm-troubleshooting*

For issues, please see https://github.com/elmcast/elm-vim/issues.

===============================================================================
CREDITS                                                           *elm-credits*

* Other vim-plugins, thanks for inspiration (elm.vim, ocaml.vim, haskell-vim)
* elm-vim contributors: https://github.com/elmcast/elm-vim/graphs/contributors

vim:ft=help:et:ts=2:sw=2:sts=2:norl
